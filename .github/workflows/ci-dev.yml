name: CI to AKS (dev)

on:
  push:
    branches: [ "main" ]
    paths:
      - "app/**"
      - ".github/workflows/ci-dev.yml"
  # Permite lanzarlo manualmente desde la UI
  workflow_dispatch: {}

# Necesario para OIDC y para leer el repo
permissions:
  id-token: write
  contents: read

# Variables de job
env:
  NAMESPACE: dev

concurrency:
  group: dev-deploy
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Validación rápida para evitar errores silenciosos
      - name: Sanity check secrets
        run: |
          test -n "${{ secrets.AZURE_CLIENT_ID }}"       || { echo "AZURE_CLIENT_ID missing"; exit 1; }
          test -n "${{ secrets.AZURE_TENANT_ID }}"       || { echo "AZURE_TENANT_ID missing"; exit 1; }
          test -n "${{ secrets.AZURE_SUBSCRIPTION_ID }}" || { echo "AZURE_SUBSCRIPTION_ID missing"; exit 1; }
          test -n "${{ secrets.AKS_RG }}"                || { echo "AKS_RG missing"; exit 1; }
          test -n "${{ secrets.AKS_NAME }}"              || { echo "AKS_NAME missing"; exit 1; }
          test -n "${{ secrets.ACR_NAME }}"              || { echo "ACR_NAME missing"; exit 1; }

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Construye en ACR y despliega a AKS
      - name: Build & Push image + Deploy to AKS
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail

            # Trae env del job
            NAMESPACE='${{ env.NAMESPACE }}'

            echo ">> Resolve ACR login server"
            ACR_LOGIN=$(az acr show -n '${{ secrets.ACR_NAME }}' --query loginServer -o tsv)
            echo "ACR_LOGIN=$ACR_LOGIN"

            echo ">> Build + push image to ACR (ACR Tasks)"
            az acr build \
              -r '${{ secrets.ACR_NAME }}' \
              -t "$ACR_LOGIN/hello-db:latest" \
              -t "$ACR_LOGIN/hello-db:${{ github.sha }}" \
              ./app

            echo ">> Get AKS credentials"
            az aks get-credentials -g '${{ secrets.AKS_RG }}' -n '${{ secrets.AKS_NAME }}' --admin --overwrite-existing

            echo ">> Ensure kubectl is available"
            if ! command -v kubectl >/dev/null 2>&1; then
              az aks install-cli
            fi

            echo ">> Ensure namespace exists"
            kubectl get ns "$NAMESPACE" >/dev/null 2>&1 || kubectl create ns "$NAMESPACE"

            echo ">> Update deployment image"
            kubectl -n "$NAMESPACE" set image deploy/hello-db web="$ACR_LOGIN/hello-db:${{ github.sha }}"

            echo ">> Wait for rollout"
            kubectl -n "$NAMESPACE" rollout status deploy/hello-db --timeout=5m
